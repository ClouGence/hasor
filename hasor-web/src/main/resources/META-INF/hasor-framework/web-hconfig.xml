<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.hasor.net/sechma/hasor-web">
    <hasor>
        <!-- 包扫描覆盖范围，逗号间隔 -->
        <loadPackages>net.hasor.web.*</loadPackages>

        <environmentVar>
            <!-- 是否启用母版页 -->
            <HASOR_RESTFUL_LAYOUT>false</HASOR_RESTFUL_LAYOUT>
            <!-- 母版页资源文件位置（可选，默认为：/layout） -->
            <HASOR_RESTFUL_LAYOUT_PATH>/layout</HASOR_RESTFUL_LAYOUT_PATH>
            <!-- 页面资源文件位置（可选，默认为：/templates） -->
            <HASOR_RESTFUL_LAYOUT_TEMPLATES>/templates</HASOR_RESTFUL_LAYOUT_TEMPLATES>

            <!-- fileupload 允许的请求大小 -->
            <HASOR_UPLOAD_MAX_REQUEST_SIZE>-1</HASOR_UPLOAD_MAX_REQUEST_SIZE>
            <!-- fileupload 允许上传的单个文件大小 -->
            <HASOR_UPLOAD_MAX_FILE_SIZE>-1</HASOR_UPLOAD_MAX_FILE_SIZE>

        </environmentVar>

        <!-- 默认要装载的模块 -->
        <modules>
            <module>net.hasor.web.render.RenderWebPlugin</module>
        </modules>

        <!-- ApiBinder 扩展（多个 type 可以指定同一个实现类，Hasor 会自动映射到同一个实例对象上） -->
        <apiBinderSet>
            <binder type="net.hasor.web.WebApiBinder">net.hasor.web.binder.InvokerWebApiBinderCreator</binder>
        </apiBinderSet>

        <!-- Invoker 扩展（多个 type 可以指定同一个实现类，Hasor 会自动映射到同一个实例对象上） -->
        <invokerCreatorSet>
            <invokerCreator type="net.hasor.web.valid.ValidInvoker">net.hasor.web.valid.ValidInvokerCreator</invokerCreator>
            <invokerCreator type="net.hasor.web.render.RenderInvoker">net.hasor.web.render.RenderInvokerCreator</invokerCreator>
        </invokerCreatorSet>

        <!-- 文件上传 -->
        <fileupload>
            <!-- 上传文件缓存目录 -->
            <cacheDirectory>%WORK_HOME%/temp/fragment</cacheDirectory>
            <!-- 允许的请求大小 ( -1 表示不限制)-->
            <maxRequestSize>${HASOR_UPLOAD_MAX_REQUEST_SIZE}</maxRequestSize>
            <!-- 允许上传的单个文件大小( -1 表示不限制) -->
            <maxFileSize>${HASOR_UPLOAD_MAX_FILE_SIZE}</maxFileSize>
        </fileupload>

        <!-- 布局管理
                - enable        是否启用布局管理功能，默认为 false。
                - placeholder   被渲染的页面在其装饰页面中的 占位符
                - defaultLayout 首先会在 layoutPath 中以相同的路径和文件名寻找装饰器，如果找不到那么将会逐层向上寻找。
         -->
        <layout enable="${HASOR_RESTFUL_LAYOUT}" placeholder="content_placeholder" defaultLayout="default.html">
            <!-- 布局模版位置 -->
            <layoutPath>${HASOR_RESTFUL_LAYOUT_PATH}</layoutPath>
            <!-- 页面模版位置 -->
            <templatePath>${HASOR_RESTFUL_LAYOUT_TEMPLATES}</templatePath>
        </layout>

        <autoLoadSpi>
            <spi>net.hasor.web.spi.AfterResponseListener</spi>
            <spi>net.hasor.web.spi.BeforeRequestListener</spi>
            <spi>net.hasor.web.spi.MappingDiscoverer</spi>
            <spi>javax.servlet.ServletContextListener</spi>
            <spi>javax.servlet.http.HttpSessionListener</spi>
            <spi>javax.servlet.ServletRequestListener</spi>
        </autoLoadSpi>
    </hasor>
</config>